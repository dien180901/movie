{"ast":null,"code":"var _jsxFileName = \"/Users/madien/Desktop/projects/movie/src/components/slider/slider.js\";\nimport React, { Component } from \"react\";\nimport SliderControl from \"./slider-control\";\nimport SliderItem from \"./slider-item\";\n\nrequire(\"./style.scss\");\n\nexport class slider extends Component {\n  constructor() {\n    super();\n\n    this.handleWindowResize = () => {\n      if (window.innerWidth > 1440) {\n        this.setState({\n          itemsInRow: 6\n        });\n      } else if (window.innerWidth >= 1000) {\n        this.setState({\n          itemsInRow: 5\n        });\n      } else if (window.innerWidth < 1000) {\n        this.setState({\n          itemsinRow: 4\n        });\n      }\n    };\n\n    this.renderSliderContent = () => {\n      const {\n        sliderHasMoved,\n        itemsInRow,\n        lowestVisibleIndex\n      } = this.state;\n      const {\n        movies\n      } = this.props;\n      const totalItems = movies.length; // slider content made up of left, mid, and right portions to allow continous cycling\n\n      const left = [];\n      const mid = [];\n      const right = []; // gets the indexes to be displayed\n\n      for (let i = 0; i < itemsInRow; i++) {\n        // left\n        if (sliderHasMoved) {\n          if (lowestVisibleIndex + i - itemsInRow < 0) {\n            left.push(totalItems - itemsInRow + lowestVisibleIndex + i);\n          } else {\n            left.push(i + lowestVisibleIndex - itemsInRow); // issue here\n          }\n        } // mid\n\n\n        if (i + lowestVisibleIndex >= totalItems) {\n          mid.push(i + lowestVisibleIndex - totalItems);\n        } else {\n          mid.push(i + lowestVisibleIndex);\n        } // right\n\n\n        if (i + lowestVisibleIndex + itemsInRow >= totalItems) {\n          right.push(i + lowestVisibleIndex + itemsInRow - totalItems);\n        } else {\n          right.push(i + lowestVisibleIndex + itemsInRow);\n        }\n      } // combine left, mid, right to have all indexes\n\n\n      const combinedIndex = [...left, ...mid, ...right]; // add on leading and trailing indexes for peek image when sliding\n\n      if (sliderHasMoved) {\n        const trailingIndex = combinedIndex[combinedIndex.length - 1] === totalItems - 1 ? 0 : combinedIndex[combinedIndex.length - 1] + 1;\n        combinedIndex.push(trailingIndex);\n      }\n\n      const leadingIndex = combinedIndex[0] === 0 ? totalItems - 1 : combinedIndex[0] - 1;\n      combinedIndex.unshift(leadingIndex);\n      const sliderContents = [];\n\n      for (let index of combinedIndex) {\n        sliderContents.push( /*#__PURE__*/React.createElement(SliderItem, {\n          movie: movies[index],\n          key: `${movies[index].id}-${index}`,\n          width: 100 / itemsInRow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 9\n          }\n        }));\n      } // adds empty divs to take up appropriate spacing when slider at initial position\n\n\n      if (!sliderHasMoved) {\n        for (let i = 0; i < itemsInRow; i++) {\n          sliderContents.unshift( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"slider-item\",\n            style: {\n              width: `${100 / itemsInRow}%`\n            },\n            key: i,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 11\n            }\n          }));\n        }\n      }\n\n      return sliderContents;\n    };\n\n    this.handlePrev = () => {\n      const {\n        lowestVisibleIndex,\n        itemsInRow\n      } = this.state;\n      const {\n        movies\n      } = this.props;\n      const totalItems = movies.length; // get the new lowest visible index\n\n      let newIndex;\n\n      if (lowestVisibleIndex < itemsInRow && lowestVisibleIndex !== 0) {\n        newIndex = 0;\n      } else if (lowestVisibleIndex - itemsInRow < 0) {\n        newIndex = totalItems - itemsInRow;\n      } else {\n        newIndex = lowestVisibleIndex - itemsInRow;\n      } // get the move percentage\n\n\n      let newMovePercentage;\n\n      if (lowestVisibleIndex === 0) {\n        newMovePercentage = 0;\n      } else if (lowestVisibleIndex - newIndex < itemsInRow) {\n        newMovePercentage = (itemsInRow - (lowestVisibleIndex - newIndex)) / itemsInRow * 100;\n      } else {\n        newMovePercentage = 0;\n      }\n\n      this.setState({\n        sliderMoving: true,\n        sliderMoveDirection: \"left\",\n        movePercentage: newMovePercentage\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            lowestVisibleIndex: newIndex,\n            sliderMoving: false,\n            sliderMoveDirection: null,\n            newMovePercentage: 0\n          });\n        }, 750);\n      });\n    };\n\n    this.handleNext = () => {\n      const {\n        sliderHasMoved,\n        lowestVisibleIndex,\n        itemsInRow\n      } = this.state;\n      const {\n        movies\n      } = this.props;\n      const totalItems = movies.length; // get the new lowest visible index\n\n      let newIndex;\n\n      if (lowestVisibleIndex === totalItems - itemsInRow) {\n        newIndex = 0;\n      } else if (lowestVisibleIndex + itemsInRow > totalItems - itemsInRow) {\n        newIndex = totalItems - itemsInRow;\n      } else {\n        newIndex = lowestVisibleIndex + itemsInRow;\n      } // get the move percentage\n\n\n      let newMovePercentage;\n\n      if (newIndex !== 0) {\n        newMovePercentage = (newIndex - lowestVisibleIndex) / itemsInRow * 100;\n      } else {\n        newMovePercentage = 100;\n      }\n\n      this.setState({\n        sliderMoving: true,\n        sliderMoveDirection: \"right\",\n        movePercentage: newMovePercentage\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            lowestVisibleIndex: newIndex,\n            sliderMoving: false,\n            sliderMoveDirection: null,\n            movePercentage: 0\n          });\n        }, 750);\n      });\n\n      if (!sliderHasMoved) {\n        this.setState({\n          sliderHasMoved: true\n        });\n      }\n    };\n\n    this.state = {\n      sliderHasMoved: false,\n      // boolean tracking if slider has moved from its initial position\n      sliderMoveDirection: null,\n      // direction of movement of slider\n      sliderMoving: false,\n      // boolean for animation of slider\n      movePercentage: 0,\n      // amount to offset slider\n      lowestVisibleIndex: 0,\n      // lowest visible index of slider items\n      itemsInRow: 5 // number of items to be displayed across screen\n\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleWindowResize);\n    this.handleWindowResize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n  } // alter number of items in row on window resize\n\n\n  render() {\n    const {\n      sliderHasMoved,\n      itemsInRow,\n      sliderMoving,\n      sliderMoveDirection,\n      movePercentage\n    } = this.state;\n    const {\n      movies\n    } = this.props; // return null if movies are not loaded\n\n    if (!movies.length) {\n      return null;\n    } // style object to determine movement of slider\n\n\n    let style = {};\n\n    if (sliderMoving) {\n      let translate = \"\";\n\n      if (sliderMoveDirection === \"right\") {\n        translate = `translateX(-${100 + movePercentage + 100 / itemsInRow}%)`;\n      } else if (sliderMoveDirection === \"left\") {\n        translate = `translateX(-${movePercentage + 100 / itemsInRow}%)`;\n      }\n\n      style = {\n        transform: translate,\n        transitionDuration: \"750ms\"\n      };\n    } else {\n      style = {\n        transform: `translateX(-${100 + (sliderHasMoved ? 100 / itemsInRow : 0)}%)`\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 7\n      }\n    }, sliderHasMoved && /*#__PURE__*/React.createElement(SliderControl, {\n      arrowDirection: \"left\",\n      onClick: this.handlePrev,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"slider-content\",\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, this.renderSliderContent()), /*#__PURE__*/React.createElement(SliderControl, {\n      arrowDirection: \"right\",\n      onClick: this.handleNext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default slider;","map":{"version":3,"sources":["/Users/madien/Desktop/projects/movie/src/components/slider/slider.js"],"names":["React","Component","SliderControl","SliderItem","require","slider","constructor","handleWindowResize","window","innerWidth","setState","itemsInRow","itemsinRow","renderSliderContent","sliderHasMoved","lowestVisibleIndex","state","movies","props","totalItems","length","left","mid","right","i","push","combinedIndex","trailingIndex","leadingIndex","unshift","sliderContents","index","id","width","handlePrev","newIndex","newMovePercentage","sliderMoving","sliderMoveDirection","movePercentage","setTimeout","handleNext","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","style","translate","transform","transitionDuration"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SliderControl from \"./slider-control\";\nimport SliderItem from \"./slider-item\";\n\nrequire(\"./style.scss\");\n\nexport class slider extends Component {\n  constructor() {\n    super();\n    this.state = {\n      sliderHasMoved: false, // boolean tracking if slider has moved from its initial position\n      sliderMoveDirection: null, // direction of movement of slider\n      sliderMoving: false, // boolean for animation of slider\n      movePercentage: 0, // amount to offset slider\n      lowestVisibleIndex: 0, // lowest visible index of slider items\n      itemsInRow: 5, // number of items to be displayed across screen\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleWindowResize);\n    this.handleWindowResize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  // alter number of items in row on window resize\n  handleWindowResize = () => {\n    if (window.innerWidth > 1440) {\n      this.setState({ itemsInRow: 6 });\n    } else if (window.innerWidth >= 1000) {\n      this.setState({ itemsInRow: 5 });\n    } else if (window.innerWidth < 1000) {\n      this.setState({ itemsinRow: 4 });\n    }\n  };\n\n  // render the slider contents\n  renderSliderContent = () => {\n    const { sliderHasMoved, itemsInRow, lowestVisibleIndex } = this.state;\n    const { movies } = this.props;\n    const totalItems = movies.length;\n\n    // slider content made up of left, mid, and right portions to allow continous cycling\n    const left = [];\n    const mid = [];\n    const right = [];\n\n    // gets the indexes to be displayed\n    for (let i = 0; i < itemsInRow; i++) {\n      // left\n      if (sliderHasMoved) {\n        if (lowestVisibleIndex + i - itemsInRow < 0) {\n          left.push(totalItems - itemsInRow + lowestVisibleIndex + i);\n        } else {\n          left.push(i + lowestVisibleIndex - itemsInRow); // issue here\n        }\n      }\n\n      // mid\n      if (i + lowestVisibleIndex >= totalItems) {\n        mid.push(i + lowestVisibleIndex - totalItems);\n      } else {\n        mid.push(i + lowestVisibleIndex);\n      }\n\n      // right\n      if (i + lowestVisibleIndex + itemsInRow >= totalItems) {\n        right.push(i + lowestVisibleIndex + itemsInRow - totalItems);\n      } else {\n        right.push(i + lowestVisibleIndex + itemsInRow);\n      }\n    }\n\n    // combine left, mid, right to have all indexes\n    const combinedIndex = [...left, ...mid, ...right];\n\n    // add on leading and trailing indexes for peek image when sliding\n    if (sliderHasMoved) {\n      const trailingIndex =\n        combinedIndex[combinedIndex.length - 1] === totalItems - 1\n          ? 0\n          : combinedIndex[combinedIndex.length - 1] + 1;\n\n      combinedIndex.push(trailingIndex);\n    }\n\n    const leadingIndex =\n      combinedIndex[0] === 0 ? totalItems - 1 : combinedIndex[0] - 1;\n    combinedIndex.unshift(leadingIndex);\n\n    const sliderContents = [];\n    for (let index of combinedIndex) {\n      sliderContents.push(\n        <SliderItem\n          movie={movies[index]}\n          key={`${movies[index].id}-${index}`}\n          width={100 / itemsInRow}\n        />\n      );\n    }\n\n    // adds empty divs to take up appropriate spacing when slider at initial position\n    if (!sliderHasMoved) {\n      for (let i = 0; i < itemsInRow; i++) {\n        sliderContents.unshift(\n          <div\n            className=\"slider-item\"\n            style={{ width: `${100 / itemsInRow}%` }}\n            key={i}\n          />\n        );\n      }\n    }\n\n    return sliderContents;\n  };\n\n  handlePrev = () => {\n    const { lowestVisibleIndex, itemsInRow } = this.state;\n    const { movies } = this.props;\n    const totalItems = movies.length;\n\n    // get the new lowest visible index\n    let newIndex;\n    if (lowestVisibleIndex < itemsInRow && lowestVisibleIndex !== 0) {\n      newIndex = 0;\n    } else if (lowestVisibleIndex - itemsInRow < 0) {\n      newIndex = totalItems - itemsInRow;\n    } else {\n      newIndex = lowestVisibleIndex - itemsInRow;\n    }\n\n    // get the move percentage\n    let newMovePercentage;\n    if (lowestVisibleIndex === 0) {\n      newMovePercentage = 0;\n    } else if (lowestVisibleIndex - newIndex < itemsInRow) {\n      newMovePercentage =\n        ((itemsInRow - (lowestVisibleIndex - newIndex)) / itemsInRow) * 100;\n    } else {\n      newMovePercentage = 0;\n    }\n\n    this.setState(\n      {\n        sliderMoving: true,\n        sliderMoveDirection: \"left\",\n        movePercentage: newMovePercentage,\n      },\n      () => {\n        setTimeout(() => {\n          this.setState({\n            lowestVisibleIndex: newIndex,\n            sliderMoving: false,\n            sliderMoveDirection: null,\n            newMovePercentage: 0,\n          });\n        }, 750);\n      }\n    );\n  };\n\n  handleNext = () => {\n    const { sliderHasMoved, lowestVisibleIndex, itemsInRow } = this.state;\n    const { movies } = this.props;\n    const totalItems = movies.length;\n\n    // get the new lowest visible index\n    let newIndex;\n    if (lowestVisibleIndex === totalItems - itemsInRow) {\n      newIndex = 0;\n    } else if (lowestVisibleIndex + itemsInRow > totalItems - itemsInRow) {\n      newIndex = totalItems - itemsInRow;\n    } else {\n      newIndex = lowestVisibleIndex + itemsInRow;\n    }\n\n    // get the move percentage\n    let newMovePercentage;\n    if (newIndex !== 0) {\n      newMovePercentage = ((newIndex - lowestVisibleIndex) / itemsInRow) * 100;\n    } else {\n      newMovePercentage = 100;\n    }\n\n    this.setState(\n      {\n        sliderMoving: true,\n        sliderMoveDirection: \"right\",\n        movePercentage: newMovePercentage,\n      },\n      () => {\n        setTimeout(() => {\n          this.setState({\n            lowestVisibleIndex: newIndex,\n            sliderMoving: false,\n            sliderMoveDirection: null,\n            movePercentage: 0,\n          });\n        }, 750);\n      }\n    );\n\n    if (!sliderHasMoved) {\n      this.setState({ sliderHasMoved: true });\n    }\n  };\n\n  render() {\n    const {\n      sliderHasMoved,\n      itemsInRow,\n      sliderMoving,\n      sliderMoveDirection,\n      movePercentage,\n    } = this.state;\n    const { movies } = this.props;\n\n    // return null if movies are not loaded\n    if (!movies.length) {\n      return null;\n    }\n\n    // style object to determine movement of slider\n    let style = {};\n    if (sliderMoving) {\n      let translate = \"\";\n      if (sliderMoveDirection === \"right\") {\n        translate = `translateX(-${100 + movePercentage + 100 / itemsInRow}%)`;\n      } else if (sliderMoveDirection === \"left\") {\n        translate = `translateX(-${movePercentage + 100 / itemsInRow}%)`;\n      }\n\n      style = {\n        transform: translate,\n        transitionDuration: \"750ms\",\n      };\n    } else {\n      style = {\n        transform: `translateX(-${\n          100 + (sliderHasMoved ? 100 / itemsInRow : 0)\n        }%)`,\n      };\n    }\n\n    return (\n      <div className=\"slider\">\n        {sliderHasMoved && (\n          <SliderControl arrowDirection={\"left\"} onClick={this.handlePrev} />\n        )}\n        <div className=\"slider-content\" style={style}>\n          {this.renderSliderContent()}\n        </div>\n\n        <SliderControl arrowDirection={\"right\"} onClick={this.handleNext} />\n      </div>\n    );\n  }\n}\n\nexport default slider;\n"]},"metadata":{},"sourceType":"module"}