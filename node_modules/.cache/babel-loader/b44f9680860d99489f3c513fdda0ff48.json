{"ast":null,"code":"var _jsxFileName = \"/Users/madien/Desktop/projects/movie/src/components/slider/slider.js\";\nimport React, { Component, useState } from \"react\";\nimport SliderControl from \"./slider-control\";\nimport SliderItem from \"./slider-item\";\n\nrequire(\"./style.scss\");\n\nexport class slider extends Component {\n  constructor() {\n    super();\n\n    this.handleWindowResize = () => {\n      if (window.innerWidth > 1440) {\n        this.setState({\n          itemsInRow: 6\n        });\n      } else if (window.innerWidth >= 1000) {\n        this.setState({\n          itemsInRow: 5\n        });\n      } else if (window.innerWidth < 1000) {\n        this.setState({\n          itemsinRow: 4\n        });\n      }\n    };\n\n    this.renderSliderContent = () => {\n      const {\n        sliderHasMoved,\n        itemsInRow,\n        lowestVisibleIndex\n      } = this.state;\n      const {\n        movies\n      } = this.props;\n      const totalItems = movies.length; // slider content made up of left, mid, and right portions to allow continous cycling\n\n      const left = [];\n      const mid = [];\n      const right = []; // gets the indexes to be displayed\n\n      for (let i = 0; i < itemsInRow; i++) {\n        // left\n        if (sliderHasMoved) {\n          if (lowestVisibleIndex + i - itemsInRow < 0) {\n            left.push(totalItems - itemsInRow + lowestVisibleIndex + i);\n          } else {\n            left.push(i + lowestVisibleIndex - itemsInRow); // issue here\n          }\n        } // mid\n\n\n        if (i + lowestVisibleIndex >= totalItems) {\n          mid.push(i + lowestVisibleIndex - totalItems);\n        } else {\n          mid.push(i + lowestVisibleIndex);\n        } // right\n\n\n        if (i + lowestVisibleIndex + itemsInRow >= totalItems) {\n          right.push(i + lowestVisibleIndex + itemsInRow - totalItems);\n        } else {\n          right.push(i + lowestVisibleIndex + itemsInRow);\n        }\n      } // combine left, mid, right to have all indexes\n\n\n      const combinedIndex = [...left, ...mid, ...right]; // add on leading and trailing indexes for peek image when sliding\n\n      if (sliderHasMoved) {\n        const trailingIndex = combinedIndex[combinedIndex.length - 1] === totalItems - 1 ? 0 : combinedIndex[combinedIndex.length - 1] + 1;\n        combinedIndex.push(trailingIndex);\n      }\n\n      const leadingIndex = combinedIndex[0] === 0 ? totalItems - 1 : combinedIndex[0] - 1;\n      combinedIndex.unshift(leadingIndex);\n      const sliderContents = [];\n      let width1 = window.innerWidth;\n\n      for (let index of combinedIndex) {\n        sliderContents.push( /*#__PURE__*/React.createElement(SliderItem, {\n          movie: movies[index],\n          key: `${movies[index].id}-${index}`,\n          width: 5,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 5\n          }\n        }));\n      } // adds empty divs to take up appropriate spacing when slider at initial position\n\n\n      if (!sliderHasMoved) {\n        for (let i = 0; i < itemsInRow; i++) {\n          sliderContents.unshift( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"slider-item\",\n            style: {\n              width: \"5%\"\n            },\n            key: i,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 6\n            }\n          }));\n        }\n      }\n\n      return sliderContents;\n    };\n\n    this.handlePrev = () => {\n      const {\n        lowestVisibleIndex,\n        itemsInRow\n      } = this.state;\n      const {\n        movies\n      } = this.props;\n      const totalItems = movies.length; // get the new lowest visible index\n\n      let newIndex;\n\n      if (lowestVisibleIndex < itemsInRow && lowestVisibleIndex !== 0) {\n        newIndex = 0;\n      } else if (lowestVisibleIndex - itemsInRow < 0) {\n        newIndex = totalItems - itemsInRow;\n      } else {\n        newIndex = lowestVisibleIndex - itemsInRow;\n      } // get the move percentage\n\n\n      let newMovePercentage;\n\n      if (lowestVisibleIndex === 0) {\n        newMovePercentage = 0;\n      } else if (lowestVisibleIndex - newIndex < itemsInRow) {\n        newMovePercentage = (itemsInRow - (lowestVisibleIndex - newIndex)) / itemsInRow * 100;\n      } else {\n        newMovePercentage = 0;\n      }\n\n      this.setState({\n        sliderMoving: true,\n        sliderMoveDirection: \"left\",\n        movePercentage: newMovePercentage\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            lowestVisibleIndex: newIndex,\n            sliderMoving: false,\n            sliderMoveDirection: null,\n            newMovePercentage: 0\n          });\n        }, 750);\n      });\n    };\n\n    this.handleNext = () => {\n      const {\n        sliderHasMoved,\n        lowestVisibleIndex,\n        itemsInRow\n      } = this.state;\n      const {\n        movies\n      } = this.props;\n      const totalItems = movies.length; // get the new lowest visible index\n\n      let newIndex;\n\n      if (lowestVisibleIndex === totalItems - itemsInRow) {\n        newIndex = 0;\n      } else if (lowestVisibleIndex + itemsInRow > totalItems - itemsInRow) {\n        newIndex = totalItems - itemsInRow;\n      } else {\n        newIndex = lowestVisibleIndex + itemsInRow;\n      } // get the move percentage\n\n\n      let newMovePercentage;\n\n      if (newIndex !== 0) {\n        newMovePercentage = (newIndex - lowestVisibleIndex) / itemsInRow * 100;\n      } else {\n        newMovePercentage = 100;\n      }\n\n      this.setState({\n        sliderMoving: true,\n        sliderMoveDirection: \"right\",\n        movePercentage: newMovePercentage\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            lowestVisibleIndex: newIndex,\n            sliderMoving: false,\n            sliderMoveDirection: null,\n            movePercentage: 0\n          });\n        }, 750);\n      });\n\n      if (!sliderHasMoved) {\n        this.setState({\n          sliderHasMoved: true\n        });\n      }\n    };\n\n    this.state = {\n      sliderHasMoved: false,\n      // boolean tracking if slider has moved from its initial position\n      sliderMoveDirection: null,\n      // direction of movement of slider\n      sliderMoving: false,\n      // boolean for animation of slider\n      movePercentage: 0,\n      // amount to offset slider\n      lowestVisibleIndex: 0,\n      // lowest visible index of slider items\n      itemsInRow: 5 // number of items to be displayed across screen\n\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleWindowResize);\n    this.handleWindowResize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n  } // alter number of items in row on window resize\n\n\n  render() {\n    const {\n      sliderHasMoved,\n      itemsInRow,\n      sliderMoving,\n      sliderMoveDirection,\n      movePercentage\n    } = this.state;\n    const {\n      movies\n    } = this.props; // return null if movies are not loaded\n\n    if (!movies.length) {\n      return null;\n    } // style object to determine movement of slider\n\n\n    let style = {};\n\n    if (sliderMoving) {\n      let translate = \"\";\n\n      if (sliderMoveDirection === \"right\") {\n        translate = `translateX(-${100 + movePercentage + 100 / itemsInRow}%)`;\n      } else if (sliderMoveDirection === \"left\") {\n        translate = `translateX(-${movePercentage + 100 / itemsInRow}%)`;\n      }\n\n      style = {\n        transform: translate,\n        transitionDuration: \"750ms\"\n      };\n    } else {\n      style = {\n        transform: `translateX(-${100 + (sliderHasMoved ? 100 / itemsInRow : 0)}%)`\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dm-slide-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 4\n      }\n    }, sliderHasMoved && /*#__PURE__*/React.createElement(SliderControl, {\n      arrowDirection: \"left\",\n      onClick: this.handlePrev,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"slider-content\",\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 5\n      }\n    }, this.renderSliderContent()), /*#__PURE__*/React.createElement(SliderControl, {\n      arrowDirection: \"right\",\n      onClick: this.handleNext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\nexport default slider;","map":{"version":3,"sources":["/Users/madien/Desktop/projects/movie/src/components/slider/slider.js"],"names":["React","Component","useState","SliderControl","SliderItem","require","slider","constructor","handleWindowResize","window","innerWidth","setState","itemsInRow","itemsinRow","renderSliderContent","sliderHasMoved","lowestVisibleIndex","state","movies","props","totalItems","length","left","mid","right","i","push","combinedIndex","trailingIndex","leadingIndex","unshift","sliderContents","width1","index","id","width","handlePrev","newIndex","newMovePercentage","sliderMoving","sliderMoveDirection","movePercentage","setTimeout","handleNext","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","style","translate","transform","transitionDuration"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport SliderControl from \"./slider-control\";\nimport SliderItem from \"./slider-item\";\n\nrequire(\"./style.scss\");\n\nexport class slider extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsliderHasMoved: false, // boolean tracking if slider has moved from its initial position\n\t\t\tsliderMoveDirection: null, // direction of movement of slider\n\t\t\tsliderMoving: false, // boolean for animation of slider\n\t\t\tmovePercentage: 0, // amount to offset slider\n\t\t\tlowestVisibleIndex: 0, // lowest visible index of slider items\n\t\t\titemsInRow: 5, // number of items to be displayed across screen\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"resize\", this.handleWindowResize);\n\t\tthis.handleWindowResize();\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener(\"resize\", this.handleWindowResize);\n\t}\n\n\t// alter number of items in row on window resize\n\thandleWindowResize = () => {\n\t\tif (window.innerWidth > 1440) {\n\t\t\tthis.setState({ itemsInRow: 6 });\n\t\t} else if (window.innerWidth >= 1000) {\n\t\t\tthis.setState({ itemsInRow: 5 });\n\t\t} else if (window.innerWidth < 1000) {\n\t\t\tthis.setState({ itemsinRow: 4 });\n\t\t}\n\t};\n\n\t// render the slider contents\n\trenderSliderContent = () => {\n\t\tconst { sliderHasMoved, itemsInRow, lowestVisibleIndex } = this.state;\n\t\tconst { movies } = this.props;\n\t\tconst totalItems = movies.length;\n\n\t\t// slider content made up of left, mid, and right portions to allow continous cycling\n\t\tconst left = [];\n\t\tconst mid = [];\n\t\tconst right = [];\n\n\t\t// gets the indexes to be displayed\n\t\tfor (let i = 0; i < itemsInRow; i++) {\n\t\t\t// left\n\t\t\tif (sliderHasMoved) {\n\t\t\t\tif (lowestVisibleIndex + i - itemsInRow < 0) {\n\t\t\t\t\tleft.push(totalItems - itemsInRow + lowestVisibleIndex + i);\n\t\t\t\t} else {\n\t\t\t\t\tleft.push(i + lowestVisibleIndex - itemsInRow); // issue here\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// mid\n\t\t\tif (i + lowestVisibleIndex >= totalItems) {\n\t\t\t\tmid.push(i + lowestVisibleIndex - totalItems);\n\t\t\t} else {\n\t\t\t\tmid.push(i + lowestVisibleIndex);\n\t\t\t}\n\n\t\t\t// right\n\t\t\tif (i + lowestVisibleIndex + itemsInRow >= totalItems) {\n\t\t\t\tright.push(i + lowestVisibleIndex + itemsInRow - totalItems);\n\t\t\t} else {\n\t\t\t\tright.push(i + lowestVisibleIndex + itemsInRow);\n\t\t\t}\n\t\t}\n\n\t\t// combine left, mid, right to have all indexes\n\t\tconst combinedIndex = [...left, ...mid, ...right];\n\n\t\t// add on leading and trailing indexes for peek image when sliding\n\t\tif (sliderHasMoved) {\n\t\t\tconst trailingIndex =\n\t\t\t\tcombinedIndex[combinedIndex.length - 1] === totalItems - 1\n\t\t\t\t\t? 0\n\t\t\t\t\t: combinedIndex[combinedIndex.length - 1] + 1;\n\n\t\t\tcombinedIndex.push(trailingIndex);\n\t\t}\n\n\t\tconst leadingIndex =\n\t\t\tcombinedIndex[0] === 0 ? totalItems - 1 : combinedIndex[0] - 1;\n\t\tcombinedIndex.unshift(leadingIndex);\n\n\t\tconst sliderContents = [];\n\t\tlet width1 = window.innerWidth;\n\t\tfor (let index of combinedIndex) {\n\t\t\tsliderContents.push(\n\t\t\t\t<SliderItem\n\t\t\t\t\tmovie={movies[index]}\n\t\t\t\t\tkey={`${movies[index].id}-${index}`}\n\t\t\t\t\twidth={5}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\t// adds empty divs to take up appropriate spacing when slider at initial position\n\t\tif (!sliderHasMoved) {\n\t\t\tfor (let i = 0; i < itemsInRow; i++) {\n\t\t\t\tsliderContents.unshift(\n\t\t\t\t\t<div className=\"slider-item\" style={{ width: \"5%\" }} key={i} />\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn sliderContents;\n\t};\n\n\thandlePrev = () => {\n\t\tconst { lowestVisibleIndex, itemsInRow } = this.state;\n\t\tconst { movies } = this.props;\n\t\tconst totalItems = movies.length;\n\n\t\t// get the new lowest visible index\n\t\tlet newIndex;\n\t\tif (lowestVisibleIndex < itemsInRow && lowestVisibleIndex !== 0) {\n\t\t\tnewIndex = 0;\n\t\t} else if (lowestVisibleIndex - itemsInRow < 0) {\n\t\t\tnewIndex = totalItems - itemsInRow;\n\t\t} else {\n\t\t\tnewIndex = lowestVisibleIndex - itemsInRow;\n\t\t}\n\n\t\t// get the move percentage\n\t\tlet newMovePercentage;\n\t\tif (lowestVisibleIndex === 0) {\n\t\t\tnewMovePercentage = 0;\n\t\t} else if (lowestVisibleIndex - newIndex < itemsInRow) {\n\t\t\tnewMovePercentage =\n\t\t\t\t((itemsInRow - (lowestVisibleIndex - newIndex)) / itemsInRow) * 100;\n\t\t} else {\n\t\t\tnewMovePercentage = 0;\n\t\t}\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tsliderMoving: true,\n\t\t\t\tsliderMoveDirection: \"left\",\n\t\t\t\tmovePercentage: newMovePercentage,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tlowestVisibleIndex: newIndex,\n\t\t\t\t\t\tsliderMoving: false,\n\t\t\t\t\t\tsliderMoveDirection: null,\n\t\t\t\t\t\tnewMovePercentage: 0,\n\t\t\t\t\t});\n\t\t\t\t}, 750);\n\t\t\t}\n\t\t);\n\t};\n\n\thandleNext = () => {\n\t\tconst { sliderHasMoved, lowestVisibleIndex, itemsInRow } = this.state;\n\t\tconst { movies } = this.props;\n\t\tconst totalItems = movies.length;\n\n\t\t// get the new lowest visible index\n\t\tlet newIndex;\n\t\tif (lowestVisibleIndex === totalItems - itemsInRow) {\n\t\t\tnewIndex = 0;\n\t\t} else if (lowestVisibleIndex + itemsInRow > totalItems - itemsInRow) {\n\t\t\tnewIndex = totalItems - itemsInRow;\n\t\t} else {\n\t\t\tnewIndex = lowestVisibleIndex + itemsInRow;\n\t\t}\n\n\t\t// get the move percentage\n\t\tlet newMovePercentage;\n\t\tif (newIndex !== 0) {\n\t\t\tnewMovePercentage = ((newIndex - lowestVisibleIndex) / itemsInRow) * 100;\n\t\t} else {\n\t\t\tnewMovePercentage = 100;\n\t\t}\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tsliderMoving: true,\n\t\t\t\tsliderMoveDirection: \"right\",\n\t\t\t\tmovePercentage: newMovePercentage,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tlowestVisibleIndex: newIndex,\n\t\t\t\t\t\tsliderMoving: false,\n\t\t\t\t\t\tsliderMoveDirection: null,\n\t\t\t\t\t\tmovePercentage: 0,\n\t\t\t\t\t});\n\t\t\t\t}, 750);\n\t\t\t}\n\t\t);\n\n\t\tif (!sliderHasMoved) {\n\t\t\tthis.setState({ sliderHasMoved: true });\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tsliderHasMoved,\n\t\t\titemsInRow,\n\t\t\tsliderMoving,\n\t\t\tsliderMoveDirection,\n\t\t\tmovePercentage,\n\t\t} = this.state;\n\t\tconst { movies } = this.props;\n\n\t\t// return null if movies are not loaded\n\t\tif (!movies.length) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// style object to determine movement of slider\n\t\tlet style = {};\n\t\tif (sliderMoving) {\n\t\t\tlet translate = \"\";\n\t\t\tif (sliderMoveDirection === \"right\") {\n\t\t\t\ttranslate = `translateX(-${100 + movePercentage + 100 / itemsInRow}%)`;\n\t\t\t} else if (sliderMoveDirection === \"left\") {\n\t\t\t\ttranslate = `translateX(-${movePercentage + 100 / itemsInRow}%)`;\n\t\t\t}\n\n\t\t\tstyle = {\n\t\t\t\ttransform: translate,\n\t\t\t\ttransitionDuration: \"750ms\",\n\t\t\t};\n\t\t} else {\n\t\t\tstyle = {\n\t\t\t\ttransform: `translateX(-${\n\t\t\t\t\t100 + (sliderHasMoved ? 100 / itemsInRow : 0)\n\t\t\t\t}%)`,\n\t\t\t};\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"dm-slide-container\">\n\t\t\t\t{sliderHasMoved && (\n\t\t\t\t\t<SliderControl arrowDirection={\"left\"} onClick={this.handlePrev} />\n\t\t\t\t)}\n\t\t\t\t<div className=\"slider-content\" style={style}>\n\t\t\t\t\t{this.renderSliderContent()}\n\t\t\t\t</div>\n\n\t\t\t\t<SliderControl arrowDirection={\"right\"} onClick={this.handleNext} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default slider;\n"]},"metadata":{},"sourceType":"module"}